[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "orbify-projects"
version = "0.1.0"
description = ""
authors = ["Marcin Skrobczy≈Ñski <marcin@skrobczynski.pl>"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.10"
fastapi = {extras = ["standard"], version = "^0.115.6"}
pydantic = "^2.10.5"
starlette = "^0.41.3"
uvicorn = "^0.34.0"
pydantic-settings = "^2.7.1"
alembic = "^1.14.0"
sqlalchemy = "^2.0.37"
psycopg = {extras = ["binary"], version = "^3.2.3"}
geojson-pydantic = "^1.2.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.4"
pytest-sugar = "^1.0.0"
pytest-cov = "^6.0.0"
pytest-parametrize = "^1.3.0"
pytest-mock = "^3.14.0"
faker = "^33.3.1"
poethepoet = "^0.32.1"
mypy = "^1.14.1"
types-pymysql = "^1.1.0.20241103"
types-pyyaml = "^6.0.12.20241230"
types-pygments = "^2.19.0.20250107"
types-colorama = "^0.4.15.20240311"
types-psycopg2 = "^2.9.21.20241019"
types-setuptools = "^75.8.0.20250110"
types-ujson = "^5.10.0.20240515"

[tool.poe.tasks]
tests = "pytest -vvv tests"
coverage = "pytest -vvv tests --cov=orbify_projects --cov-report=term --cov-report=html --cov-fail-under=85"
mypy = "mypy --install-types ."

[tool.ruff]
line-length = 120
indent-width = 4

[tool.ruff.lint]
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "UP", # pyupgrade
    "I", # isort
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "C4", # flake8-comprehensions
    "T10", # flake8-debugger
    "T20", # flake8-print
    "SIM", # flake8-simplify
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = false

[tool.mypy]
strict = true
exclude = ["alembic", "tests"]
disallow_subclassing_any = false

[tool.coverage.report]
exclude_also = [
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
